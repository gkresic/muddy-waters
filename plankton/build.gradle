buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
	}
}

apply plugin: 'application'
apply plugin: 'com.google.protobuf'

ext {
	protobufVersion = '3.21.12'
	grpcVersion = '1.51.1'
}

dependencies {

	implementation 'ch.qos.logback:logback-core:1.4.3'
	implementation 'ch.qos.logback:logback-classic:1.4.3'
	implementation 'org.slf4j:slf4j-api:2.0.3'

	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
	// use more standard 'sourceS' instead of 'source' (TODO doesn't work, results in empty 'generated' folder?)
	//generatedFilesBaseDir = "$buildDir/generated/sources/proto"
}

application {
	mainClass = 'com.steatoda.muddywaters.plankton.PlanktonCmd'
}

distributions {
	main {
		contents {
			rename('logback.template.xml', 'logback.xml')
		}
	}
}

startScripts {
	doLast {
		unixScript.text = unixScript.text.replace('CLASSPATH=', 'CLASSPATH=$PLANKTON_CONF:$APP_HOME/conf:')
		windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%PLANKTON_CONF%;%APP_HOME%\\conf;')
	}
}

run {
	classpath += files("${System.env.PLANKTON_CONF}", "${System.properties.PLANKTON_CONF}", "${project.buildDir}/install/plankton/conf")
	standardInput = System.in
}

build.dependsOn installDist

distTar.enabled = false
distZip.enabled = false

task benchmark(type: JavaExec) {
	group = 'Application'
	description = 'Runs benchmarks (make sure Plankton app is running!)'
	mainClass = 'com.steatoda.muddywaters.plankton.benchmark.BenchmarkCmd'
	classpath += files("${System.env.PLANKTON_CONF}", "${System.properties.PLANKTON_CONF}")
	classpath += files(sourceSets.main.compileClasspath, sourceSets.main.runtimeClasspath)
	workingDir '../'
	standardInput = System.in
}
